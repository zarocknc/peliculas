//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "Peliculas")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id_pelicula: i32,
    pub titulo: Option<String>,
    pub ano_lanzamiento: Option<i32>,
    pub genero: Option<String>,
    pub clasificacion: Option<String>,
    pub id_director: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::actores::Entity")]
    Actores,
    #[sea_orm(has_many = "super::comentarios::Entity")]
    Comentarios,
    #[sea_orm(
        belongs_to = "super::directores::Entity",
        from = "Column::IdDirector",
        to = "super::directores::Column::IdDirector",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Directores,
}

impl Related<super::actores::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Actores.def()
    }
}

impl Related<super::comentarios::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comentarios.def()
    }
}

impl Related<super::directores::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Directores.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
